/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    navbar: Navbar;
    pages: Page;
    users: User;
    media: Media;
    'blog-posts': BlogPost;
    'contact-submissions': ContactSubmission;
    footer: Footer;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    navbar: NavbarSelect<false> | NavbarSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    'blog-posts': BlogPostsSelect<false> | BlogPostsSelect<true>;
    'contact-submissions': ContactSubmissionsSelect<false> | ContactSubmissionsSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    'contact-page': ContactPage;
  };
  globalsSelect: {
    'contact-page': ContactPageSelect<false> | ContactPageSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navbar".
 */
export interface Navbar {
  id: string;
  name: string;
  logoType?: ('image' | 'text') | null;
  logoText?: string | null;
  logoImage?: (string | null) | Media;
  links?:
    | {
        label: string;
        url: string;
        id?: string | null;
      }[]
    | null;
  socials?:
    | {
        icon: string | Media;
        url: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  caption?: string | null;
  cloudinaryUrl?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title: string;
  slug: string;
  layout?:
    | (
        | {
            label?: string | null;
            headline?: string | null;
            subtext?: string | null;
            button?: {
              text?: string | null;
              link?: string | null;
            };
            rating?: {
              text?: string | null;
            };
            bgColor?: {
              color_name?: string | null;
            };
            backgroundVideoURL?: string | null;
            posterImage?: (string | null) | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero';
          }
        | {
            items: {
              text: string;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'marquee';
          }
        | {
            sectionTopHeading?: string | null;
            sectionName?: string | null;
            sectionTitle?: string | null;
            bg_color?: string | null;
            sectionDescription?: string | null;
            attributes?:
              | {
                  title?: string | null;
                  image?: (string | null) | Media;
                  id?: string | null;
                }[]
              | null;
            finalImage?: (string | null) | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'about';
          }
        | {
            sectionTitle: string;
            blockBgColor?: string | null;
            cards?:
              | {
                  smallHeading: string;
                  smallHeadingColor?: string | null;
                  heading: string;
                  bio: string;
                  cardBgColor?: string | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'carousel';
          }
        | {
            subHeading?: string | null;
            heading: string;
            comparisonSections: {
              sectionTitle: 'gfrp' | 'tmt' | 'common';
              logo: string | Media;
              title: string;
              description: string;
              properties: {
                icon: string | Media;
                bgColor?: string | null;
                property: {
                  root: {
                    type: string;
                    children: {
                      type: string;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                };
                id?: string | null;
              }[];
              bestFor: string;
              cardBgColor?: string | null;
              cardTextColor?: string | null;
              lineColor?: string | null;
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'gfrp-vs-tmt';
          }
        | {
            sectionTitle: string;
            sectionBgColor?: string | null;
            imageOne: string | Media;
            imageTwo: string | Media;
            products?:
              | {
                  logo: string | Media;
                  title: string;
                  bio: string;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'product-section';
          }
        | {
            description: string;
            id?: string | null;
            blockName?: string | null;
            blockType: 'vision-section';
          }
        | {
            sectionTitle: string;
            /**
             * Background color for the whole blog section.
             */
            backgroundColor?: string | null;
            /**
             * Choose specific blog posts to feature in this section.
             */
            selectedBlogs?: (string | BlogPost)[] | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'blogSection';
          }
        | {
            /**
             * Hex color code for the background, e.g., #ffffff or #f9fafb
             */
            bgColor?: string | null;
            subheading?: string | null;
            heading: string;
            mainImage: string | Media;
            facts?:
              | {
                  title: string;
                  description: string;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'science-block';
          }
        | {
            sectionTitle: string;
            faqs?:
              | {
                  question: string;
                  answer: string;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'faq-block';
          }
        | {
            /**
             * Enter a hex code or class (e.g., #f0f0f0 or bg-blue-500)
             */
            backgroundColor: string;
            smallHeading?: string | null;
            title: string;
            button1: {
              label: string;
              backgroundColor: string;
              textColor: string;
              link: string;
            };
            button2: {
              label: string;
              backgroundColor: string;
              textColor: string;
              link: string;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'cta-section';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-posts".
 */
export interface BlogPost {
  id: string;
  tag: string;
  title: string;
  slug: string;
  date: string;
  mainImage: string | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Select related blog posts to show at the bottom.
   */
  relatedBlogs?: (string | BlogPost)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-submissions".
 */
export interface ContactSubmission {
  id: string;
  formData:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  title: string;
  logo?: {
    type?: ('image' | 'text') | null;
    text?: string | null;
    image?: (string | null) | Media;
  };
  newsletter: {
    title: string;
    warning?: string | null;
  };
  companyLinks?:
    | {
        label: string;
        url: string;
        id?: string | null;
      }[]
    | null;
  legalLinks?:
    | {
        label: string;
        url: string;
        id?: string | null;
      }[]
    | null;
  socialMedia?:
    | {
        icon?: (string | null) | Media;
        url: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'navbar';
        value: string | Navbar;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'blog-posts';
        value: string | BlogPost;
      } | null)
    | ({
        relationTo: 'contact-submissions';
        value: string | ContactSubmission;
      } | null)
    | ({
        relationTo: 'footer';
        value: string | Footer;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navbar_select".
 */
export interface NavbarSelect<T extends boolean = true> {
  name?: T;
  logoType?: T;
  logoText?: T;
  logoImage?: T;
  links?:
    | T
    | {
        label?: T;
        url?: T;
        id?: T;
      };
  socials?:
    | T
    | {
        icon?: T;
        url?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  layout?:
    | T
    | {
        hero?:
          | T
          | {
              label?: T;
              headline?: T;
              subtext?: T;
              button?:
                | T
                | {
                    text?: T;
                    link?: T;
                  };
              rating?:
                | T
                | {
                    text?: T;
                  };
              bgColor?:
                | T
                | {
                    color_name?: T;
                  };
              backgroundVideoURL?: T;
              posterImage?: T;
              id?: T;
              blockName?: T;
            };
        marquee?:
          | T
          | {
              items?:
                | T
                | {
                    text?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        about?:
          | T
          | {
              sectionTopHeading?: T;
              sectionName?: T;
              sectionTitle?: T;
              bg_color?: T;
              sectionDescription?: T;
              attributes?:
                | T
                | {
                    title?: T;
                    image?: T;
                    id?: T;
                  };
              finalImage?: T;
              id?: T;
              blockName?: T;
            };
        carousel?:
          | T
          | {
              sectionTitle?: T;
              blockBgColor?: T;
              cards?:
                | T
                | {
                    smallHeading?: T;
                    smallHeadingColor?: T;
                    heading?: T;
                    bio?: T;
                    cardBgColor?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        'gfrp-vs-tmt'?:
          | T
          | {
              subHeading?: T;
              heading?: T;
              comparisonSections?:
                | T
                | {
                    sectionTitle?: T;
                    logo?: T;
                    title?: T;
                    description?: T;
                    properties?:
                      | T
                      | {
                          icon?: T;
                          bgColor?: T;
                          property?: T;
                          id?: T;
                        };
                    bestFor?: T;
                    cardBgColor?: T;
                    cardTextColor?: T;
                    lineColor?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        'product-section'?:
          | T
          | {
              sectionTitle?: T;
              sectionBgColor?: T;
              imageOne?: T;
              imageTwo?: T;
              products?:
                | T
                | {
                    logo?: T;
                    title?: T;
                    bio?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        'vision-section'?:
          | T
          | {
              description?: T;
              id?: T;
              blockName?: T;
            };
        blogSection?:
          | T
          | {
              sectionTitle?: T;
              backgroundColor?: T;
              selectedBlogs?: T;
              id?: T;
              blockName?: T;
            };
        'science-block'?:
          | T
          | {
              bgColor?: T;
              subheading?: T;
              heading?: T;
              mainImage?: T;
              facts?:
                | T
                | {
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        'faq-block'?:
          | T
          | {
              sectionTitle?: T;
              faqs?:
                | T
                | {
                    question?: T;
                    answer?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        'cta-section'?:
          | T
          | {
              backgroundColor?: T;
              smallHeading?: T;
              title?: T;
              button1?:
                | T
                | {
                    label?: T;
                    backgroundColor?: T;
                    textColor?: T;
                    link?: T;
                  };
              button2?:
                | T
                | {
                    label?: T;
                    backgroundColor?: T;
                    textColor?: T;
                    link?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  cloudinaryUrl?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-posts_select".
 */
export interface BlogPostsSelect<T extends boolean = true> {
  tag?: T;
  title?: T;
  slug?: T;
  date?: T;
  mainImage?: T;
  content?: T;
  relatedBlogs?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-submissions_select".
 */
export interface ContactSubmissionsSelect<T extends boolean = true> {
  formData?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  title?: T;
  logo?:
    | T
    | {
        type?: T;
        text?: T;
        image?: T;
      };
  newsletter?:
    | T
    | {
        title?: T;
        warning?: T;
      };
  companyLinks?:
    | T
    | {
        label?: T;
        url?: T;
        id?: T;
      };
  legalLinks?:
    | T
    | {
        label?: T;
        url?: T;
        id?: T;
      };
  socialMedia?:
    | T
    | {
        icon?: T;
        url?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-page".
 */
export interface ContactPage {
  id: string;
  smallTitle?: string | null;
  heading?: string | null;
  description?: string | null;
  address?: string | null;
  email?: string | null;
  image?: (string | null) | Media;
  formFields?:
    | {
        label: string;
        name: string;
        type: 'text' | 'email' | 'textarea';
        required?: boolean | null;
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-page_select".
 */
export interface ContactPageSelect<T extends boolean = true> {
  smallTitle?: T;
  heading?: T;
  description?: T;
  address?: T;
  email?: T;
  image?: T;
  formFields?:
    | T
    | {
        label?: T;
        name?: T;
        type?: T;
        required?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}